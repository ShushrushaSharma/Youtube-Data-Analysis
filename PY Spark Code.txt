import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Adjust the parsing options
AmazonS3_node1724850675274 = glueContext.create_dynamic_frame.from_options(
    format_options={
        "quoteChar": "\"", 
        "withHeader": True, 
        "separator": ",", 
        "optimizePerformance": False, 
        "multiLine": True,  # Enables handling of multiline records
        "escapeChar": "\\"  # Helps handle escaped characters
    },
    connection_type="s3",
    format="csv",
    connection_options={"paths": ["s3://de-on-youtube/youtube/raw_statistics/JPvideos.csv"], "recurse": True},
    transformation_ctx="AmazonS3_node1724850675274"
)

# Apply transformations to your data
ChangeSchema_node1724851013819 = ApplyMapping.apply(
    frame=AmazonS3_node1724850675274,
    mappings=[
        ("video_id", "string", "video_id", "string"),
        ("trending_date", "string", "trending_date", "string"),
        ("title", "string", "title", "string"),
        ("channel_title", "string", "channel_title", "string"),
        ("category_id", "string", "category_id", "bigint"),
        ("publish_time", "string", "publish_time", "string"),
        ("tags", "string", "tags", "string"),
        ("views", "string", "views", "bigint"),
        ("likes", "string", "likes", "bigint"),
        ("dislikes", "string", "dislikes", "bigint"),
        ("comment_count", "string", "comment_count", "bigint"),
        ("thumbnail_link", "string", "thumbnail_link", "string"),
        ("comments_disabled", "string", "comments_disabled", "boolean"),
        ("ratings_disabled", "string", "ratings_disabled", "boolean"),
        ("video_error_or_removed", "string", "video_error_or_removed", "boolean"),
        ("description", "string", "description", "string")
    ],
    transformation_ctx="ChangeSchema_node1724851013819"
)

datasink1 = ChangeSchema_node1724851013819.toDF().coalesce(1)
df_final_output = DynamicFrame.fromDF(datasink1, glueContext, "df_final_output")

# Write data to the AWS Glue Data Catalog without partitioning by region
AWSGlueDataCatalog_node1724850759096 = glueContext.write_dynamic_frame.from_catalog(
    frame=df_final_output,
    database="db_youtube_cleaned",
    table_name="cleaned_statistics_reference_data",
    additional_options={"enableUpdateCatalog": True, "updateBehavior": "UPDATE_IN_DATABASE"},
    transformation_ctx="AWSGlueDataCatalog_node1724850759096"
)

job.commit()
